aliases:
  - &docs-job
    docker:
      - image: cloudreach/sceptre-circleci:0.4
        environment:
          REPOSITORY_PATH: '/home/circleci/docs'
          DEPLOYMENT_GIT_SSH: 'git@github.com:Sceptre/docs.git'
    steps:
      - add_ssh_keys:
          fingerprints:
            - '80:24:c0:40:28:36:f1:80:7f:fd:15:c3:09:cf:86:fc'
      - attach_workspace:
          at: /home/circleci
      - run:
          name: 'Build and deploy docs'
          command: |
            chmod +x .circleci/add-known-hosts.sh
            ./.circleci/add-known-hosts.sh
            . ./venv/bin/activate
            chmod +x .circleci/github-pages.sh
            ./.circleci/github-pages.sh

version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: cloudreach/sceptre
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    docker:
      - image: cloudreach/sceptre-circleci:0.4
    steps:
      - checkout
      - run:
          name: 'Creating Virtualenv'
          command: virtualenv venv
      - restore_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-requirements-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
      - run:
          name: 'Installing Requirements'
          command: |
            . ./venv/bin/activate
            pip install -r requirements/prod.txt
            pip install -r requirements/dev.txt
            pip install awscli
      - save_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-requirements-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
          paths:
            - venv
      - run:
          name: 'Installing Sceptre'
          command: |
            . ./venv/bin/activate
            pip install .
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
  lint-and-unit-tests:
    docker:
      - image: cloudreach/sceptre-circleci:0.4
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-tox-requirements-{{ arch
            }}-{{ checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }} -{{ checksum "tox.ini" }}
      - run:
          name: 'Linting'
          command: |
            . ./venv/bin/activate
            make lint
      - run:
          name: 'Unit Test and Coverage'
          command: |
            tox
      - store_test_results:
          path: htmlcov
      - store_test_results:
          path: htmlcov
      - store_test_results:
          path: build/pytest
      - store_artifacts:
          path: build/pytest
      - save_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-tox-requirements-{{ arch
            }}-{{ checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - .tox
  integration-tests:
    parallelism: 2
    docker:
      - image: cloudreach/sceptre-circleci:0.4
        environment:
          AWS_DEFAULT_REGION: eu-west-1
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: 'Integration Testing'
          command: |
            . ./venv/bin/activate
            behave --junit \
                   --junit-directory build/behave \
                   $(circleci tests glob "integration-tests/features/*.feature" | circleci tests split --split-by=timings)
      - store_test_results:
          path: build/behave
      - store_artifacts:
          path: build/behave

  deploy-docs-branch: *docs-job
  deploy-docs-tag: *docs-job

  deploy-pypi:
    docker:
      - image: cloudreach/sceptre-circleci:0.4
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: 'Create Distributions'
          command: |
            . ./venv/bin/activate
            make dist
      - run:
          name: 'Upload Distributions'
          command: |
            . ./venv/bin/activate
            pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

  build-docker-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker Image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish-latest-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image archive
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin docker push $IMAGE_NAME:latest

  deploy-dockerhub-tagged:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Tagged Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - lint-and-unit-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - integration-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /^pull\/.*/

      - deploy-docs-branch:
          requires:
            - lint-and-unit-tests
            - integration-tests
          filters:
            branches:
              only: master

      - deploy-docs-tag:
          requires:
            - lint-and-unit-tests
            - integration-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-pypi-approval:
          type: approval
          requires:
            - lint-and-unit-tests
            - integration-tests
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

      - deploy-pypi:
          requires:
            - deploy-pypi-approval
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

      - build-docker-image:
          requires:
            - lint-and-unit-tests
            - integration-tests

      - deploy-latest-dockerhub:
          requires:
            - build-docker-image
          filters:
            branches:
              only: master

      - deploy-dockerhub-tagged:
          requires:
            - deploy-pypi
            - build-docker-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
