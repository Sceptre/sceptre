version: 2.1

orbs:
  twitter-orb: jakousa/twitter-orb@1.0.1

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: cloudreach/sceptre
    docker:
      - image: circleci/buildpack-deps:stretch

aliases:
  - &docs-job
    docker:
      - image: cloudreach/sceptre-circleci:1.0.0
        environment:
          REPOSITORY_PATH: '/home/circleci/docs'
          DEPLOYMENT_GIT_SSH: 'git@github.com:Sceptre/sceptre.github.io.git'
    steps:
      - add_ssh_keys:
          fingerprints:
            - '80:24:c0:40:28:36:f1:80:7f:fd:15:c3:09:cf:86:fc'
      - attach_workspace:
          at: /home/circleci
      - run:
          name: 'Build and deploy docs'
          command: |
            chmod +x .circleci/add-known-hosts.sh
            ./.circleci/add-known-hosts.sh
            pyenv global venv
            chmod +x .circleci/github-pages.sh
            ./.circleci/github-pages.sh

jobs:
  build:
    docker:
      - image: cloudreach/sceptre-circleci:1.0.0
    steps:
      - checkout
      - run:
          name: 'Creating Virtualenv'
          command: |
            pyenv virtualenv 3.9.4 venv
      - restore_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
      - run:
          name: 'Installing Dependencies'
          command: |
            pyenv global venv
            make install-dev
      - save_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
          paths:
            - ../.pyenv/versions/3.9.4/envs/venv
      - run:
          name: 'Installing Sceptre'
          command: |
            pyenv global venv
            pip install .
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - .pyenv

  lint-and-unit-tests:
    docker:
      - image: cloudreach/sceptre-circleci:1.0.0
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache:
          keys:
            - sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
              checksum "requirements/prod.txt" }}-{{ checksum "requirements/dev.txt" }}
            - sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
              checksum "requirements/prod.txt" }}-{{ checksum
              "requirements/dev.txt" }}-{{ checksum "tox.ini" }}
      - run:
          name: 'Linting'
          command: |
            pyenv global venv
            make lint
      - run:
          name: 'Unit Test'
          command: |
            pyenv global venv
            make test-all
      - save_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-{{ arch
            }}-{{ checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - .tox
      - store_test_results:
          path: coverage.xml
          destination: coverage-reports

  integration-tests:
    parallelism: 2
    docker:
      - image: cloudreach/sceptre-circleci:1.0.0
        environment:
          AWS_DEFAULT_REGION: eu-west-1
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
      - run:
          name: 'Integration Testing'
          command: |
            pyenv global venv
            mkdir -p ~/.aws
            echo -e "[default]\nregion=eu-west-1\nsource_profile=default\nrole_arn=arn:aws:iam::743644221192:role/sceptre-integration-test-ServiceRole-1SHK9LY0T6P3F" > ~/.aws/config
            echo -e "[default]\nregion=eu-west-1\naws_access_key_id=$CI_SERVICE_AWS_ACCESS_KEY_ID\naws_secret_access_key=$CI_SERVICE_AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials
            behave --junit \
                   --junit-directory build/behave \
                   $(circleci tests glob "integration-tests/features/*.feature" | circleci tests split --split-by=timings)
      - store_test_results:
          path: build/behave
          destination: build/behave
      - store_artifacts:
          path: build/behave
          destination: build/behave

  build-docker-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker Image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  deploy-docs-branch: *docs-job

  deploy-docs-tag: *docs-job

  deploy-pypi:
    docker:
      - image: cloudreach/sceptre-circleci:1.0.0
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache:
          key:
            sceptre-{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{
            checksum "requirements/prod.txt" }}-{{ checksum
            "requirements/dev.txt" }}
      - run:
          name: 'Installing Dependencies'
          command: |
            pyenv global venv
            make install-dev
      - run:
          name: 'Create Distributions'
          command: |
            pyenv global venv
            make dist
      - run:
          name: 'Upload Distributions'
          command: |
            pyenv global venv
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

  deploy-latest-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image archive
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

  deploy-dockerhub-tagged:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Tagged Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  tweet-release:
    docker:
      - image: jakousa/twurl:latest
    resource_class: small
    steps:
      - twitter-orb/tweet:
          access_secret: TOKEN_SECRET
          access_token: ACCESS_TOKEN
          consumer_key: API_KEY
          consumer_secret: API_SECRET
          contents: |
            (echo $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME) has released << pipeline.git.tag >>:
            << pipeline.project.git_url >>/releases/tag/<< pipeline.git.tag >>

workflows:
  build-and-unit-test:
    jobs:
      - build:
          filters:
            branches:
              only: /^pull\/.*/
      - lint-and-unit-tests:
          requires:
            - build
          filters:
            branches:
              only: /^pull\/.*/
      - build-docker-image:
          requires:
            - lint-and-unit-tests
          filters:
            branches:
              only: /^pull\/.*/

  build-test-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^pull\/.*/
      - lint-and-unit-tests:
          requires:
            - build
          filters:
            branches:
              ignore: /^pull\/.*/
      - integration-tests:
          context: sceptre-core
          requires:
            - build
          filters:
            branches:
              ignore: /^pull\/.*/
      - deploy-docs-branch:
          context: sceptre-core
          requires:
            - lint-and-unit-tests
            - integration-tests
          filters:
            branches:
              ignore: /^pull\/.*/
      - build-docker-image:
          requires:
            - lint-and-unit-tests
            - integration-tests
          filters:
            branches:
              ignore: /^pull\/.*/
      - deploy-latest-dockerhub:
          context: sceptre-core
          requires:
            - build-docker-image
          filters:
            branches:
              ignore: /^pull\/.*/

  publish:
    jobs:
      - build:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - deploy-pypi:
          context: sceptre-core
          requires:
            - build
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - deploy-docs-tag:
          context: sceptre-core
          requires:
            - deploy-pypi
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - build-docker-image:
          requires:
            - deploy-pypi
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - deploy-dockerhub-tagged:
          context: sceptre-core
          requires:
            - build-docker-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - tweet-release:
          context: sceptreorg-twitter
          requires:
            - deploy-dockerhub-tagged
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
