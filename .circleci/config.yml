version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: sceptreorg/sceptre
    docker:
      - image: circleci/buildpack-deps:stretch

aliases:
  - &docs-job
    executor: python/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "80:24:c0:40:28:36:f1:80:7f:fd:15:c3:09:cf:86:fc"
      - attach_workspace:
          at: /home/circleci
      - python/install-packages:
          pkg-manager: poetry
          args: --all-extras
      - run:
          name: Build and deploy docs
          command: |
            poetry run ./.circleci/add-known-hosts.sh
            poetry run ./.circleci/github-pages.sh
          environment:
            REPOSITORY_PATH: /home/circleci/docs
            DEPLOYMENT_GIT_SSH: git@github.com:Sceptre/sceptre.github.io.git

jobs:
  build:
    executor: python/default
    steps:
      - checkout
      - restore_cache:
          key: sceptre-v1-{{ checksum ".pre-commit-config.yaml" }}
      - python/install-packages:
          pkg-manager: poetry
          args: --all-extras
      - run:
          name: Run pre-commit
          command: poetry run pre-commit run --all-files --show-diff-on-failure
      - run:
          name: Build package
          command: poetry build
      - save_cache:
          key: sceptre-v1-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

  unit-tests:
    parameters:
      python:
        type: string
    executor:
      name: python/default
      tag: <<parameters.python>>
    steps:
      - checkout
      - restore_cache:
          key: sceptre-v1-{{ checksum "poetry.lock" }}-{{ checksum "tox.ini" }}
      # Update poetry for https://github.com/python-poetry/poetry/issues/7184
      - run: poetry self update --no-ansi
      - python/install-packages:
          pkg-manager: poetry
          args: --all-extras
      - run:
          name: Unit Tests
          # Normally a single tox invocation runs the tests on all available
          # Python versions.
          #
          # Now CircleCI runs parallel test pipelines, one for each supported
          # Python version.
          #
          # See `matrix.parameters.python` for the Python version values. Each
          # pipeline uses that value as its default Python version.
          #
          # There is one tox invocation for each pipeline. The `-e` option runs
          # tox on just the default Python for that pipeline.
          #
          # The container may make more Python versions available, and we don't
          # want tox to run the tests on those because they may cause false
          # failures.
          #
          # For example, if the container for Python 3.12 would use Python 3.12
          # by default. It make also have an earlier Python version installed
          # such as 3.10 that was used for bootstrapping the container image.
          # Configured this way, tox ignores the version 3.10 in the pipeline
          # for version 3.12.
          command: |
            poetry run tox -e py$(echo <<parameters.python>> | tr -d .)
            poetry run tox -e report
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: htmlcov
          destination: coverage-reports
      - save_cache:
          key: sceptre-v1-{{ checksum "poetry.lock" }}-{{ checksum "tox.ini" }}
          paths:
            - ".tox"

  integration-tests:
    executor: python/default
    parallelism: 2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: "Integration Testing"
          command: |
            mkdir -p ~/.aws
            echo -e "[default]\nregion=eu-west-1\nsource_profile=default\nrole_arn=arn:aws:iam::743644221192:role/sceptre-integration-test-ServiceRole-1SHK9LY0T6P3F" > ~/.aws/config
            echo -e "[default]\nregion=eu-west-1\naws_access_key_id=$CI_SERVICE_AWS_ACCESS_KEY_ID\naws_secret_access_key=$CI_SERVICE_AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials
            poetry run behave \
                      --junit \
                      --junit-directory build/behave \
                      $(circleci tests glob "integration-tests/features/*.feature" | circleci tests split --split-by=timings)
      - store_test_results:
          path: build/behave
          destination: build/behave
      - store_artifacts:
          path: build/behave
          destination: build/behave

  build-docker-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker Image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  deploy-docs-branch: *docs-job

  deploy-docs-tag: *docs-job

  deploy-pypi-test:
    executor: python/default
    steps:
      - checkout
      - run:
          name: Test upload to PyPi
          command: |
            poetry config repositories.test-pypi "https://test.pypi.org/legacy/"
            poetry publish --build -r test-pypi -u __token__ -p $TEST_PYPI_API_TOKEN

  deploy-pypi-prod:
    executor: python/default
    steps:
      - checkout
      - run:
          name: Upload to PyPi
          command: poetry publish --build -u __token__ -p $PYPI_API_TOKEN

  deploy-latest-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image archive
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

  deploy-dockerhub-tagged:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Tagged Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  build-and-unit-test:
    jobs:
      - build:
          filters:
            branches:
              only: /^pull\/.*/
      - unit-tests:
          requires:
            - build
          filters:
            branches:
              only: /^pull\/.*/
          matrix:
            parameters:
              python: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      - build-docker-image:
          requires:
            - build
          filters:
            branches:
              only: /^pull\/.*/

  build-test-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^pull\/.*/
      - unit-tests:
          requires:
            - build
          filters:
            branches:
              ignore: /^pull\/.*/
          matrix:
            parameters:
              python: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      - integration-tests:
          context: sceptre-core
          requires:
            - build
          filters:
            branches:
              ignore: /^pull\/.*/
      - deploy-pypi-test:
          context: sceptre-core
          requires:
            - unit-tests
          filters:
            branches:
              ignore: /^pull\/.*/
      - deploy-docs-branch:
          context: sceptre-core
          requires:
            - unit-tests
            - integration-tests
          filters:
            branches:
              ignore: /^pull\/.*/
      - build-docker-image:
          requires:
            - unit-tests
          filters:
            branches:
              ignore: /^pull\/.*/
      - deploy-latest-dockerhub:
          context: sceptreorg-dockerhub
          requires:
            - integration-tests
            - build-docker-image
          filters:
            branches:
              ignore: /^pull\/.*/

  publish:
    jobs:
      - deploy-pypi-prod:
          context: sceptre-core
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - deploy-docs-tag:
          context: sceptre-core
          requires:
            - deploy-pypi-prod
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - build-docker-image:
          requires:
            - deploy-pypi-prod
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - deploy-dockerhub-tagged:
          context: sceptreorg-dockerhub
          requires:
            - build-docker-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
